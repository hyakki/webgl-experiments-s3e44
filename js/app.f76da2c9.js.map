{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/components/Webgl/glsl/box.frag","webpack:///./src/App.vue?3075","webpack:///./src/components/Webgl/textures/city.png","webpack:///./src/App.vue","webpack:///./src/components/Webgl/Webgl.vue","webpack:///./src/components/Webgl/Webgl.vue?13fe","webpack:///./src/components/Webgl/Webgl.vue?c686","webpack:///./src/App.vue?3acc","webpack:///./src/App.vue?eabf","webpack:///./src/main.ts","webpack:///./src/components/Webgl/glsl/box.vert"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","class","ref","OrbitControls","setup","camera","scene","renderer","sketchGeometry","sketchMaterial","sketchMesh","composer","renderPass","bloomPass","cityMaterial","container","time","cityContainer","lastPoint","textures","load","gR","pi","Math","PI","setSize","getBoundingClientRect","width","height","setCameraAspect","aspect","updateProjectionMatrix","createSketch","addToScene","side","wireframe","add","createCurve","origin","radius","angle","curve","x","y","points","getPoints","geometry","setFromPoints","material","color","curveMesh","createCity","delta","startAngle","fragmentShader","default","vertexShader","uniforms","city","uTime","transparent","planeMesh","position","rotateZ","set","children","forEach","createCamera","z","createScene","background","createRenderer","antialias","EffectComposer","RenderPass","UnrealBloomPass","addPass","renderToScreen","createOrbitControls","domElement","update","render","v","rotationAngle","degToRad","rotation","scaleScalar","scale","setScalar","requestAnimationFrame","viewportHandler","appendChild","addEventListener","components","Webgl","app","App","use","mount"],"mappings":"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","file":"js/app.f76da2c9.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export default \"#define GLSLIFY 1\\nvarying vec2 vUv;\\nuniform sampler2D city;\\nuniform float uTime;\\n\\nvoid main() {\\n  vec4 color = texture2D(city, vUv);\\n\\n  // color.rgba = vec4(vUv.x, vUv.y, 0.0, 1.0);\\n\\n  gl_FragColor = color;\\n}\\n\";","export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../node_modules/vue-loader-v16/dist/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./App.vue?vue&type=style&index=0&lang=scss\"","module.exports = __webpack_public_path__ + \"img/city.a90be15b.png\";","<template>\n  <div class=\"app\">\n    <Webgl class=\"app__webgl\" />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport Webgl from '@/components/Webgl/Webgl.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    Webgl,\n  },\n}\n</script>\n\n<style lang=\"scss\">\n[class*='app--'],\nbody {\n  overscroll-behavior: none;\n}\n\n.app {\n  @include get-all-space;\n\n  color: $c-black;\n}\n\n.app__webgl {\n  @include get-all-space;\n\n  overflow: hidden;\n}\n</style>\n","<template>\n  <div class=\"webgl-component\" ref=\"container\"></div>\n</template>\n\n<script lang=\"ts\">\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport { onMounted, ref } from 'vue'\nimport * as THREE from 'three'\n\nimport glsl from 'glslify'\n\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js'\n\nimport city from './textures/city.png'\n\n// eslint-disable-next-line\nlet OrbitControls = require('three-orbit-controls')(THREE)\n\nexport default {\n  name: 'Webgl',\n  setup() {\n    const container = ref()\n\n    let time = 0\n    let camera, scene, renderer\n    let sketchGeometry, sketchMaterial, sketchMesh\n    let lineGeometry, lineMaterial, lineMesh\n    let curveGeometry, curveMaterial, curveMesh\n    let composer, renderPass, bloomPass\n    let cityMaterial\n\n    const cityContainer = new THREE.Object3D()\n    const lastPoint = new THREE.Vector2(0, 0)\n\n    const textures = [new THREE.TextureLoader().load(city)]\n\n    const gR = 1.6180339887\n    const pi = Math.PI\n\n    const setSize = () => {\n      const { width, height } = container.value.getBoundingClientRect()\n\n      renderer.setSize(width, height)\n      composer.setSize(width, height)\n    }\n\n    const setCameraAspect = () => {\n      const { width, height } = container.value.getBoundingClientRect()\n\n      camera.aspect = width / height\n      camera.updateProjectionMatrix()\n    }\n\n    const createSketch = (addToScene = true) => {\n      sketchGeometry = new THREE.PlaneBufferGeometry(1.0 * gR, 1.0, 1.0, 1.0)\n\n      sketchMaterial = new THREE.MeshNormalMaterial({\n        side: THREE.DoubleSide,\n        wireframe: true,\n      })\n      // sketchMaterial = new THREE.ShaderMaterial({\n      //   fragmentShader: glsl(require('./glsl/sketch.frag').default),\n      //   vertexShader: glsl(require('./glsl/sketch.vert').default),\n      //   uniforms: {\n      //     uDrums: { value: 0.0 },\n      //     uPads: { value: 0.0 },\n      //     uTime: { value: 0.0 },\n      //   },\n      //   transparent: true,\n      // })\n\n      sketchMesh = new THREE.Mesh(sketchGeometry, sketchMaterial)\n      // sketchMesh.position.y += 0.5\n\n      addToScene && scene.add(sketchMesh)\n    }\n\n    const createCurve = (origin, radius, angle, addToScene = true) => {\n      const curve = new THREE.EllipseCurve(\n        origin.x,\n        origin.y,\n        radius,\n        radius,\n        angle,\n        angle - pi / 2,\n        true,\n        0\n      )\n\n      const points = curve.getPoints(50)\n      const geometry = new THREE.BufferGeometry().setFromPoints(points)\n\n      const material = new THREE.LineBasicMaterial({ color: 0xffffff })\n\n      // Create the final object to add to the scene\n      const curveMesh = new THREE.Line(geometry, material)\n\n      addToScene && scene.add(curveMesh)\n    }\n\n    const createPoint = (origin, addToScene = true) => {\n      const geometry = new THREE.BufferGeometry().setFromPoints([origin])\n\n      const material = new THREE.PointsMaterial({\n        color: 0xffffff,\n        size: 0.001,\n      })\n\n      // Create the final object to add to the scene\n      const pointMesh = new THREE.Points(geometry, material)\n\n      addToScene && scene.add(pointMesh)\n    }\n\n    const createCity = (addToScene = true) => {\n      const origin = new THREE.Vector2(0 + (1 - gR / 2), 0 - 0.5)\n      const radius = [1, 1]\n      let delta\n      let startAngle = pi\n\n      const geometry = new THREE.PlaneGeometry(radius[1], radius[1], 1, 1)\n      cityMaterial = new THREE.ShaderMaterial({\n        fragmentShader: glsl(require('./glsl/box.frag').default),\n        vertexShader: glsl(require('./glsl/box.vert').default),\n        uniforms: {\n          city: { value: textures[0] },\n          uTime: { value: 0.0 },\n        },\n        side: THREE.DoubleSide,\n        transparent: true,\n      })\n\n      // const planeMesh = new THREE.Mesh(geometry, cityMaterial)\n      // planeMesh.position.x = origin.x - radius[1] / 2\n      // planeMesh.position.y = origin.y + radius[1] / 2\n\n      // cityContainer.add(planeMesh)\n      // addToScene && scene.add(planeMesh)\n\n      // createPoint(origin)\n      // createCurve(origin, radius[1], startAngle, true)\n\n      for (let i = 2; i < 22; i++) {\n        radius[1] = radius[0] / gR\n        delta = radius[0] - radius[1]\n\n        const geometry = new THREE.PlaneBufferGeometry(\n          radius[1],\n          radius[1],\n          1,\n          1\n        )\n        const planeMesh = new THREE.Mesh(geometry, cityMaterial)\n\n        switch (i % 4) {\n          case 0:\n            origin.y = origin.y + delta\n            startAngle = pi / 2\n            planeMesh.position.x = origin.x + radius[1] / 2\n            planeMesh.position.y = origin.y + radius[1] / 2\n            break\n          case 1:\n            origin.x = origin.x + delta\n            startAngle = 0\n            planeMesh.position.x = origin.x + radius[1] / 2\n            planeMesh.position.y = origin.y - radius[1] / 2\n            break\n          case 2:\n            origin.y = origin.y - delta\n            startAngle = -pi / 2\n            planeMesh.position.x = origin.x - radius[1] / 2\n            planeMesh.position.y = origin.y - radius[1] / 2\n            break\n          case 3:\n            origin.x = origin.x - delta\n            startAngle = pi\n            planeMesh.position.x = origin.x - radius[1] / 2\n            planeMesh.position.y = origin.y + radius[1] / 2\n            break\n        }\n\n        planeMesh.rotateZ(pi + startAngle)\n        cityContainer.add(planeMesh)\n        // addToScene && scene.add(planeMesh)\n\n        // createPoint(origin)\n        createCurve(origin, radius[1], startAngle)\n        radius[0] = radius[1]\n\n        lastPoint.set(origin.x, origin.y)\n      }\n\n      cityContainer.children.forEach(m => {\n        m.position.x -= lastPoint.x\n        m.position.y -= lastPoint.y\n      })\n\n      // cityContainer.rotateZ(THREE.MathUtils.degToRad(90))\n\n      addToScene && scene.add(cityContainer)\n    }\n\n    const createCamera = () => {\n      const { width, height } = container.value.getBoundingClientRect()\n\n      camera = new THREE.PerspectiveCamera(70, width / height, 0.001, 100)\n      camera.position.z = 0.05\n    }\n\n    const createScene = () => {\n      scene = new THREE.Scene()\n      scene.background = new THREE.Color(0x40162c)\n    }\n\n    const createRenderer = () => {\n      const { width, height } = container.value.getBoundingClientRect()\n\n      renderer = new THREE.WebGLRenderer({ antialias: false })\n      composer = new EffectComposer(renderer)\n\n      renderPass = new RenderPass(scene, camera)\n      bloomPass = new UnrealBloomPass(\n        new THREE.Vector2(width, height),\n        0.0, // strength\n        1.0, // radius\n        0.2 // threshold\n      )\n\n      composer.addPass(renderPass)\n      composer.addPass(bloomPass)\n\n      bloomPass.renderToScreen = true\n    }\n\n    const createOrbitControls = () => {\n      new OrbitControls(camera, renderer.domElement)\n    }\n\n    const update = () => {\n      composer.render(scene, camera)\n      time += 1\n\n      cityMaterial.uniforms.uTime.value = time\n\n      const v = (time / 600) % 1 // 0 .. 1 based on time\n\n      const rotationAngle = THREE.MathUtils.degToRad(v * -360)\n      cityContainer.rotation.z = rotationAngle\n\n      // How should I make evolve the scale based on the rotation?\n      // default: (1.0, 1.0, 1.0)\n      const scaleScalar = 1 - (1 - 0.146) * v // 1 .. 0.855\n      cityContainer.scale.setScalar(scaleScalar)\n\n      window.requestAnimationFrame(update)\n    }\n\n    const viewportHandler = () => {\n      setSize()\n      setCameraAspect()\n    }\n\n    onMounted(() => {\n      createCamera()\n      createScene()\n\n      createSketch(false)\n      createCity()\n\n      createRenderer()\n      createOrbitControls()\n\n      setSize()\n      container.value.appendChild(renderer.domElement)\n\n      update()\n\n      window.addEventListener('resize', viewportHandler)\n    })\n\n    return {\n      container,\n    }\n  },\n}\n</script>\n","\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport { onMounted, ref } from 'vue'\nimport * as THREE from 'three'\n\nimport glsl from 'glslify'\n\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js'\n\nimport city from './textures/city.png'\n\n// eslint-disable-next-line\nlet OrbitControls = require('three-orbit-controls')(THREE)\n\nexport default {\n  name: 'Webgl',\n  setup() {\n    const container = ref()\n\n    let time = 0\n    let camera, scene, renderer\n    let sketchGeometry, sketchMaterial, sketchMesh\n    let lineGeometry, lineMaterial, lineMesh\n    let curveGeometry, curveMaterial, curveMesh\n    let composer, renderPass, bloomPass\n    let cityMaterial\n\n    const cityContainer = new THREE.Object3D()\n    const lastPoint = new THREE.Vector2(0, 0)\n\n    const textures = [new THREE.TextureLoader().load(city)]\n\n    const gR = 1.6180339887\n    const pi = Math.PI\n\n    const setSize = () => {\n      const { width, height } = container.value.getBoundingClientRect()\n\n      renderer.setSize(width, height)\n      composer.setSize(width, height)\n    }\n\n    const setCameraAspect = () => {\n      const { width, height } = container.value.getBoundingClientRect()\n\n      camera.aspect = width / height\n      camera.updateProjectionMatrix()\n    }\n\n    const createSketch = (addToScene = true) => {\n      sketchGeometry = new THREE.PlaneBufferGeometry(1.0 * gR, 1.0, 1.0, 1.0)\n\n      sketchMaterial = new THREE.MeshNormalMaterial({\n        side: THREE.DoubleSide,\n        wireframe: true,\n      })\n      // sketchMaterial = new THREE.ShaderMaterial({\n      //   fragmentShader: glsl(require('./glsl/sketch.frag').default),\n      //   vertexShader: glsl(require('./glsl/sketch.vert').default),\n      //   uniforms: {\n      //     uDrums: { value: 0.0 },\n      //     uPads: { value: 0.0 },\n      //     uTime: { value: 0.0 },\n      //   },\n      //   transparent: true,\n      // })\n\n      sketchMesh = new THREE.Mesh(sketchGeometry, sketchMaterial)\n      // sketchMesh.position.y += 0.5\n\n      addToScene && scene.add(sketchMesh)\n    }\n\n    const createCurve = (origin, radius, angle, addToScene = true) => {\n      const curve = new THREE.EllipseCurve(\n        origin.x,\n        origin.y,\n        radius,\n        radius,\n        angle,\n        angle - pi / 2,\n        true,\n        0\n      )\n\n      const points = curve.getPoints(50)\n      const geometry = new THREE.BufferGeometry().setFromPoints(points)\n\n      const material = new THREE.LineBasicMaterial({ color: 0xffffff })\n\n      // Create the final object to add to the scene\n      const curveMesh = new THREE.Line(geometry, material)\n\n      addToScene && scene.add(curveMesh)\n    }\n\n    const createPoint = (origin, addToScene = true) => {\n      const geometry = new THREE.BufferGeometry().setFromPoints([origin])\n\n      const material = new THREE.PointsMaterial({\n        color: 0xffffff,\n        size: 0.001,\n      })\n\n      // Create the final object to add to the scene\n      const pointMesh = new THREE.Points(geometry, material)\n\n      addToScene && scene.add(pointMesh)\n    }\n\n    const createCity = (addToScene = true) => {\n      const origin = new THREE.Vector2(0 + (1 - gR / 2), 0 - 0.5)\n      const radius = [1, 1]\n      let delta\n      let startAngle = pi\n\n      const geometry = new THREE.PlaneGeometry(radius[1], radius[1], 1, 1)\n      cityMaterial = new THREE.ShaderMaterial({\n        fragmentShader: glsl(require('./glsl/box.frag').default),\n        vertexShader: glsl(require('./glsl/box.vert').default),\n        uniforms: {\n          city: { value: textures[0] },\n          uTime: { value: 0.0 },\n        },\n        side: THREE.DoubleSide,\n        transparent: true,\n      })\n\n      // const planeMesh = new THREE.Mesh(geometry, cityMaterial)\n      // planeMesh.position.x = origin.x - radius[1] / 2\n      // planeMesh.position.y = origin.y + radius[1] / 2\n\n      // cityContainer.add(planeMesh)\n      // addToScene && scene.add(planeMesh)\n\n      // createPoint(origin)\n      // createCurve(origin, radius[1], startAngle, true)\n\n      for (let i = 2; i < 22; i++) {\n        radius[1] = radius[0] / gR\n        delta = radius[0] - radius[1]\n\n        const geometry = new THREE.PlaneBufferGeometry(\n          radius[1],\n          radius[1],\n          1,\n          1\n        )\n        const planeMesh = new THREE.Mesh(geometry, cityMaterial)\n\n        switch (i % 4) {\n          case 0:\n            origin.y = origin.y + delta\n            startAngle = pi / 2\n            planeMesh.position.x = origin.x + radius[1] / 2\n            planeMesh.position.y = origin.y + radius[1] / 2\n            break\n          case 1:\n            origin.x = origin.x + delta\n            startAngle = 0\n            planeMesh.position.x = origin.x + radius[1] / 2\n            planeMesh.position.y = origin.y - radius[1] / 2\n            break\n          case 2:\n            origin.y = origin.y - delta\n            startAngle = -pi / 2\n            planeMesh.position.x = origin.x - radius[1] / 2\n            planeMesh.position.y = origin.y - radius[1] / 2\n            break\n          case 3:\n            origin.x = origin.x - delta\n            startAngle = pi\n            planeMesh.position.x = origin.x - radius[1] / 2\n            planeMesh.position.y = origin.y + radius[1] / 2\n            break\n        }\n\n        planeMesh.rotateZ(pi + startAngle)\n        cityContainer.add(planeMesh)\n        // addToScene && scene.add(planeMesh)\n\n        // createPoint(origin)\n        createCurve(origin, radius[1], startAngle)\n        radius[0] = radius[1]\n\n        lastPoint.set(origin.x, origin.y)\n      }\n\n      cityContainer.children.forEach(m => {\n        m.position.x -= lastPoint.x\n        m.position.y -= lastPoint.y\n      })\n\n      // cityContainer.rotateZ(THREE.MathUtils.degToRad(90))\n\n      addToScene && scene.add(cityContainer)\n    }\n\n    const createCamera = () => {\n      const { width, height } = container.value.getBoundingClientRect()\n\n      camera = new THREE.PerspectiveCamera(70, width / height, 0.001, 100)\n      camera.position.z = 0.05\n    }\n\n    const createScene = () => {\n      scene = new THREE.Scene()\n      scene.background = new THREE.Color(0x40162c)\n    }\n\n    const createRenderer = () => {\n      const { width, height } = container.value.getBoundingClientRect()\n\n      renderer = new THREE.WebGLRenderer({ antialias: false })\n      composer = new EffectComposer(renderer)\n\n      renderPass = new RenderPass(scene, camera)\n      bloomPass = new UnrealBloomPass(\n        new THREE.Vector2(width, height),\n        0.0, // strength\n        1.0, // radius\n        0.2 // threshold\n      )\n\n      composer.addPass(renderPass)\n      composer.addPass(bloomPass)\n\n      bloomPass.renderToScreen = true\n    }\n\n    const createOrbitControls = () => {\n      new OrbitControls(camera, renderer.domElement)\n    }\n\n    const update = () => {\n      composer.render(scene, camera)\n      time += 1\n\n      cityMaterial.uniforms.uTime.value = time\n\n      const v = (time / 600) % 1 // 0 .. 1 based on time\n\n      const rotationAngle = THREE.MathUtils.degToRad(v * -360)\n      cityContainer.rotation.z = rotationAngle\n\n      // How should I make evolve the scale based on the rotation?\n      // default: (1.0, 1.0, 1.0)\n      const scaleScalar = 1 - (1 - 0.146) * v // 1 .. 0.855\n      cityContainer.scale.setScalar(scaleScalar)\n\n      window.requestAnimationFrame(update)\n    }\n\n    const viewportHandler = () => {\n      setSize()\n      setCameraAspect()\n    }\n\n    onMounted(() => {\n      createCamera()\n      createScene()\n\n      createSketch(false)\n      createCity()\n\n      createRenderer()\n      createOrbitControls()\n\n      setSize()\n      container.value.appendChild(renderer.domElement)\n\n      update()\n\n      window.addEventListener('resize', viewportHandler)\n    })\n\n    return {\n      container,\n    }\n  },\n}\n","import { render } from \"./Webgl.vue?vue&type=template&id=36a23754&bindings={\\\"container\\\":\\\"setup\\\"}\"\nimport script from \"./Webgl.vue?vue&type=script&lang=ts\"\nexport * from \"./Webgl.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","\nimport Webgl from '@/components/Webgl/Webgl.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    Webgl,\n  },\n}\n","import { render } from \"./App.vue?vue&type=template&id=be9c2dc6&bindings={}\"\nimport script from \"./App.vue?vue&type=script&lang=ts\"\nexport * from \"./App.vue?vue&type=script&lang=ts\"\n\nimport \"./App.vue?vue&type=style&index=0&lang=scss\"\nscript.render = render\n\nexport default script","import { createApp } from 'vue'\nimport App from './App.vue'\nimport './styles/main.scss'\n\nimport VueAware from 'vue-aware'\n\nconst app = createApp(App)\n\napp.use(VueAware)\napp.mount('#app')\n","export default \"#define GLSLIFY 1\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 pos = position;\\n\\n  vec4 mvPosition = modelViewMatrix * vec4(pos, 1.0);\\n  vec4 worldPosition = modelMatrix * vec4(pos, 1.0 );\\n\\n  gl_Position = projectionMatrix * mvPosition;\\n\\n  vUv = uv;\\n}\\n\";"],"sourceRoot":""}